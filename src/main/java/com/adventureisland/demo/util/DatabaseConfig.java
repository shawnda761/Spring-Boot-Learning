package com.adventureisland.demo.util;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@Configuration
@PropertySource({ "classpath:database.properties" })
@MapperScan(basePackages = { "${primary.datasource.base-packages}" }, sqlSessionFactoryRef = "primarySqlSessionFactory")
@EnableTransactionManagement
@EnableJpaRepositories(basePackages = {
		"${secondary.datasource.repositories.base-packages}" }, entityManagerFactoryRef = "secondaryDatabaseEntityManagerFactory", transactionManagerRef = "secondaryDatabaseTransactionManager")
public class DatabaseConfig {

	@Value("${primary.datasource.mapper-locations}")
	private String primaryDataSourceMapperLocations;

	@Value("${primary.datasource.type-aliases-package}")
	private String primaryDataSourceTypeAliasesPackage;

	@Value("${secondary.datasource.entities.base-packages}")
	private String secondaryDataSourceEntitiesBasePackages;

	@Value("${secondary.jpa.auto-generate-ddl}")
	private Boolean secondaryAutoGenerateDdl;

	@Value("${secondary.jpa.show-sql}")
	private Boolean secondaryShowSql;

	@Bean
	@Primary
	@Qualifier("primaryDataSource")
	@ConfigurationProperties(prefix = "primary.database")
	public DataSource primaryDataSource() {
		return DataSourceBuilder.create().build();
	}

	@Bean
	@Qualifier("secondaryDataSource")
	@ConfigurationProperties(prefix = "secondary.database")
	public DataSource secondaryDataSource() {
		return DataSourceBuilder.create().build();
	}

	@Bean
	@Primary
	public SqlSessionFactory primarySqlSessionFactory(@Qualifier("primaryDataSource") DataSource primaryDataSource)
			throws Exception {
		final SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
		sqlSessionFactory.setDataSource(primaryDataSource);
		sqlSessionFactory.setTypeAliasesPackage(primaryDataSourceTypeAliasesPackage);
		sqlSessionFactory.setMapperLocations(
				new PathMatchingResourcePatternResolver().getResources(primaryDataSourceMapperLocations));
		return sqlSessionFactory.getObject();
	}

	@Bean
	public LocalContainerEntityManagerFactoryBean secondaryDatabaseEntityManagerFactory() {
		LocalContainerEntityManagerFactoryBean secondaryDatabaseEntityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();
		secondaryDatabaseEntityManagerFactoryBean.setDataSource(secondaryDataSource());
		secondaryDatabaseEntityManagerFactoryBean
				.setPackagesToScan(new String[] { secondaryDataSourceEntitiesBasePackages });

		HibernateJpaVendorAdapter vendorAdaptor = new HibernateJpaVendorAdapter();
		vendorAdaptor.setGenerateDdl(secondaryAutoGenerateDdl);
		vendorAdaptor.setShowSql(secondaryShowSql);

		secondaryDatabaseEntityManagerFactoryBean.setJpaVendorAdapter(vendorAdaptor);

		return secondaryDatabaseEntityManagerFactoryBean;
	}

	@Bean
	public PlatformTransactionManager secondaryDatabaseTransactionManager() {
		return new JpaTransactionManager(secondaryDatabaseEntityManagerFactory().getObject());
	}

}
